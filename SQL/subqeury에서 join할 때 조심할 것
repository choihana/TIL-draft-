{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 윈도우 함수를 사용해서 순서를 구해보자\n",
    "\n",
    "문제 출처: leetcode / 185. Department Top Three Salaries\n",
    "링크: https://leetcode.com/problems/department-top-three-salaries/\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 문제. 각 부서별로 salary가 3위인 사람까지 추출!\n",
    "* salary가 같을경우 같은 rank를 부여하고, 다음 순위는 +1 rank부터 시작한다. (dense_rank() 사용)\n",
    "\n",
    "### Table1. Employee\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>Salary</th>\n",
       "      <th>DepartmentId</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Joe</td>\n",
       "      <td>85000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Henry</td>\n",
       "      <td>80000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Sam</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Max</td>\n",
       "      <td>90000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Janet</td>\n",
       "      <td>69000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Randy</td>\n",
       "      <td>85000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Will</td>\n",
       "      <td>70000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id   name  Salary  DepartmentId\n",
       "0   1    Joe   85000             1\n",
       "1   2  Henry   80000             2\n",
       "2   3    Sam   60000             2\n",
       "3   4    Max   90000             1\n",
       "4   5  Janet   69000             1\n",
       "5   6  Randy   85000             1\n",
       "6   7   Will   70000             1"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "employee_dict={\n",
    "    'id':[1,2,3,4,5,6,7],\n",
    "    'name':['Joe','Henry','Sam','Max','Janet','Randy','Will'],\n",
    "    'Salary':[85000,80000,60000,90000,69000,85000,70000],\n",
    "    'DepartmentId':[1,2,2,1,1,1,1]\n",
    "}\n",
    "Employee=pd.DataFrame(employee_dict)\n",
    "Employee"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Table2. Department"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>IT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Sales</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id   name\n",
       "0   1     IT\n",
       "1   2  Sales"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "department_dict={\n",
    "    'id':[1,2],\n",
    "    'name':['IT','Sales'],\n",
    "}\n",
    "Department=pd.DataFrame(department_dict)\n",
    "Department"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 예상 결과물"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Department</th>\n",
       "      <th>Employee</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IT</td>\n",
       "      <td>Max</td>\n",
       "      <td>90000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IT</td>\n",
       "      <td>Randy</td>\n",
       "      <td>85000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IT</td>\n",
       "      <td>Joe</td>\n",
       "      <td>85000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IT</td>\n",
       "      <td>Will</td>\n",
       "      <td>70000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sales</td>\n",
       "      <td>Henry</td>\n",
       "      <td>80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sales</td>\n",
       "      <td>Sam</td>\n",
       "      <td>60000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Department Employee  Salary\n",
       "0         IT      Max   90000\n",
       "1         IT    Randy   85000\n",
       "2         IT      Joe   85000\n",
       "3         IT     Will   70000\n",
       "4      Sales    Henry   80000\n",
       "5      Sales      Sam   60000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_dict={\n",
    "    'Department':['IT','IT','IT','IT','Sales','Sales'],\n",
    "    'Employee':['Max','Randy','Joe','Will','Henry','Sam'],\n",
    "    'Salary':[90000,85000,85000,70000,80000,60000]\n",
    "}\n",
    "Result=pd.DataFrame(result_dict)\n",
    "Result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 문제 풀이 순서\n",
    "\n",
    "1) department와 employee 테이블을 조인한다.\n",
    "\n",
    "2) 부서 별 salary 순위를 구해준다.\n",
    "\n",
    "3) 각 부서 별로 1,2,3 위 까지 구해준다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 오류 발생한 쿼리\n",
    "\n",
    "error message: The column 'Id' was specified multiple times for 'sub'.\n",
    "\n",
    "```sql\n",
    "SELECT d.Name AS Department, e.Name AS Employee, e.Salary AS Salary\n",
    "FROM(\n",
    "    SELECT *\n",
    "    ,DENSE_RANK() OVER (PARTITION BY d.name ORDER BY e.Salary DESC) as s_rank\n",
    "    FROM Employee e\n",
    "    INNER JOIN Department d ON e.DepartmentID = d.Id) AS sub\n",
    "WHERE s_rank IN (1,2,3)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Why?\n",
    "\n",
    "에러메시지를 보면 Id 컬럼에 문제가 있는 것 같다.\n",
    "\n",
    "Multiple .. 뭔가 중복이라는 소리같다.\n",
    "\n",
    "코드를 잘못쓴걸까 뜯어보다가, Employee 테이블과 Department 테이블 둘다 Id 컬럼을 가지고 있는 걸 발견했다!\n",
    "\n",
    "위에 쿼리를 보면 From 안 subquery select 문에서 * 로 모든 컬럼을 가져오려고 하는데, 이러면 e.id와, d.id 가 모두 추출되고 바깥 쿼리문에서 id를 뽑으려고 할 경우 이게 e.id 인지, d.id인지 구분할 수 없어진다. \n",
    "\n",
    "바깥에서 e.id, d.id로 구분해서 쓰면 되잖아! 라고 말하고 싶었는데, sql은 그렇게 동작하지 않는것같다 ㅠ ㅠ 왜일까?!\n",
    "\n",
    "id 컬럼뿐 아니라 조인하는 두 테이블에서 각각 동일한 컬럼명을 sub 쿼리 내 select 문에 동시에 사용할 경우 오류 발생한다. (ex. e.Name, d.Name) \n",
    "\n",
    "두 컬럼 모두 사용하고 싶을 때는 그러면 어떻게 하지?\n",
    "\n",
    "### 정답: AS로 별칭을 다르게 지정해주면 된다.\n",
    "\n",
    "예시: e.Name AS Employee, d.Name AS Department"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 정답 쿼리"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sql\n",
    "SELECT Department, Employee, Salary\n",
    "FROM(\n",
    "    SELECT d.Name AS Department, e.Name AS Employee, e.Salary AS Salary\n",
    "    ,DENSE_RANK() OVER (PARTITION BY d.name ORDER BY e.Salary DESC) as s_rank\n",
    "    FROM Employee e\n",
    "    INNER JOIN Department d ON e.DepartmentID = d.Id) AS sub\n",
    "WHERE s_rank IN (1,2,3)\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
